install.packages("leaflet")       # For interactive maps
install.packages(leaflet)
install.packages("leaflet")
install.packages("sf")
install.packages("sf")
install.packages("dplyr")         # For data manipulation
install.packages("ggplot2")       # For data visualization
install.packages("spData")        # For sample spatial datasets (if needed)
install.packages("sp")            # For spatial operations
library(leaflet)    # For creating interactive maps
library(sf)         # For spatial data handling
> library(dplyr)      # For data manipulation
library(dplyr)      # For data manipulation
library(ggplot2)    # For visualization (if needed)
library(readr)
YlangWorldData <- read.csv("C:/Users/beeka/OneDrive/Documents/R/YlangWorld/Ylang World Coordinates.csv")
head(YlangWorldData)
str(YlangWorldData)
library(tidyr)
# Split the Latitude.Longitude column into two separate columns
YlangWorldData <- separate(YlangWorldData, Latitude.Longitude, into = c("Latitude", "Longitude"), sep = ";")
# Convert Latitude and Longitude to numeric values
YlangWorldData$Latitude <- as.numeric(YlangWorldData$Latitude)
YlangWorldData$Longitude <- as.numeric(YlangWorldData$Longitude)
str(YlangWorldData)
library(ggplot2)
library(sf)
library(dplyr)
# Convert your data frame into a simple features (sf) object
YlangWorldData_sf <- st_as_sf(YlangWorldData, coords = c("Longitude", "Latitude"), crs = 4326)
YlangWorldData_sf
ggplot() +
geom_sf(data = YlangWorldData_sf, aes(color = Latitude), size = 1) +
theme_minimal() +
ggtitle("Map of Ylang World Coordinates") +
theme(legend.position = "none")
names(YlangWorldData_sf)
library(ggplot2)
# Plot the spatial object
ggplot(YlangWorldData_sf) +
geom_sf() +  # Add the points from the spatial data
theme_minimal() +  # Clean theme for the plot
ggtitle("Ylang World Coordinates Map") +  # Add a title
labs(x = "Longitude", y = "Latitude")  # Labels for axes
install.packages("ggspatial")
library(ggspatial)
ggplot(YlangWorldData_sf) +
geom_sf(aes(color = Latitude), size = 2) +
scale_color_gradient(low = "blue", high = "red") +
annotation_map_tile("Stamen.Watercolor") +  # Adds Stamen Watercolor tiles
theme_minimal() +
ggtitle("Ylang World Coordinates Map with Watercolor Base")
library(ggplot2)
ggplot(YlangWorldData_sf) +
geom_sf(aes(color = Latitude), size = 2) +
scale_color_gradient(low = "blue", high = "red") +
annotation_map_tile("Stamen.Watercolor") +  # Adds Stamen Watercolor tiles
theme_minimal() +
ggtitle("Ylang World Coordinates Map with Watercolor Base")
ggplot(YlangWorldData_sf) +
geom_sf(aes(color = Longitude), size = 2) +  # or you can use Latitude instead of Longitude
scale_color_gradient(low = "blue", high = "red") +
annotation_map_tile("Stamen.Watercolor") +  # Adds Stamen Watercolor tiles
theme_minimal() +
ggtitle("Ylang World Coordinates Map with Watercolor Base")
# Check the columns of the sf object
names(YlangWorldData_sf)
# Load necessary libraries
library(tidyr)
library(sf)
# Read your CSV file
YlangWorldData <- read.csv("C:/Users/beeka/OneDrive/Documents/R/YlangWorld/Ylang World Coordinates.csv")
# Split Latitude.Longitude into two columns
YlangWorldData <- separate(YlangWorldData, Latitude.Longitude, into = c("Latitude", "Longitude"), sep = ";")
# Convert Latitude and Longitude to numeric
YlangWorldData$Latitude <- as.numeric(YlangWorldData$Latitude)
YlangWorldData$Longitude <- as.numeric(YlangWorldData$Longitude)
# Convert to an sf object, explicitly defining the Longitude and Latitude columns for the geometry
YlangWorldData_sf <- st_as_sf(YlangWorldData, coords = c("Longitude", "Latitude"), crs = 4326)
# Check that the sf object has the correct columns and geometry
names(YlangWorldData_sf)
# Check the column names before converting to sf
colnames(YlangWorldData)
# View the first few rows of the data to confirm the correct column names and values
head(YlangWorldData)
# Convert to an sf object, explicitly defining Longitude and Latitude
YlangWorldData_sf <- st_as_sf(YlangWorldData, coords = c("Longitude", "Latitude"), crs = 4326)
# Check the column names after conversion
names(YlangWorldData_sf)
# Check the geometry type
st_geometry(YlangWorldData_sf)
# Load ggplot2 if necessary
library(ggplot2)
# Plot the data
ggplot(data = YlangWorldData_sf) +
geom_sf() +
theme_minimal()
install.packages("ggmap")
library(ggmap)
# Get a base map centered around your data's region (for example, center on the first point)
base_map <- get_map(location = c(lon = mean(YlangWorldData$Longitude), lat = mean(YlangWorldData$Latitude)),
zoom = 4,  # Adjust zoom level for better fit
maptype = "toner-lite")  # You can change to "terrain", "satellite", etc.
# Get a base map centered around your data's region
base_map <- get_map(location = c(lon = mean(YlangWorldData$Longitude), lat = mean(YlangWorldData$Latitude)),
zoom = 4,  # Adjust zoom level for better fit
maptype = "toner-lite",  # Use 'toner-lite' or another maptype like 'terrain' or 'satellite'
source = "stamen")  # Specify source as "stamen" for free provider
# Get a base map centered around your data's region (OpenStreetMap)
base_map <- get_map(location = c(lon = mean(YlangWorldData$Longitude), lat = mean(YlangWorldData$Latitude)),
zoom = 4,  # Adjust zoom level for better fit
maptype = "terrain",  # You can use "terrain", "satellite", etc.
source = "osm")  # Source is OpenStreetMap, no API key needed
Error in `get_googlemap()`:
# Load the necessary library
library(ggmap)
# Get a base map centered around your data's region using OpenStreetMap
base_map <- get_map(location = c(lon = mean(YlangWorldData$Longitude), lat = mean(YlangWorldData$Latitude)),
zoom = 4,  # Adjust zoom level for better fit
maptype = "terrain",  # You can use "terrain", "satellite", etc.
source = "osm")  # Explicitly set source to OpenStreetMap
# Install and load the leaflet package
install.packages("leaflet")
library(leaflet)
# Create a leaflet map
leaflet_map <- leaflet(data = YlangWorldData_sf) %>%
addProviderTiles("OpenStreetMap") %>%  # Add OpenStreetMap as the base layer
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("Lat:", Latitude, "<br>", "Lon:", Longitude))  # Add your data points
# Install and load the leaflet package
install.packages("leaflet")
library(leaflet)
# Create a leaflet map with sf object
leaflet_map <- leaflet(data = YlangWorldData_sf) %>%
addProviderTiles("OpenStreetMap") %>%  # Add OpenStreetMap as the base layer
addCircleMarkers(data = YlangWorldData_sf,
~st_coordinates(YlangWorldData_sf)[,1],  # Extract Longitude
~st_coordinates(YlangWorldData_sf)[,2],  # Extract Latitude
popup = ~paste("Lat:", st_coordinates(YlangWorldData_sf)[,2], "<br>", "Lon:", st_coordinates(YlangWorldData_sf)[,1]))  # Show Lat and Lon
# Print the map
leaflet_map
library(leaflet)
leaflet_map <- leaflet(data = YlangWorldData_sf) %>%
addProviderTiles("OpenStreetMap") %>%  # Add OpenStreetMap as the base layer
addCircleMarkers(data = YlangWorldData_sf,
~st_coordinates(YlangWorldData_sf)[,1],  # Extract Longitude
~st_coordinates(YlangWorldData_sf)[,2],  # Extract Latitude
popup = ~paste("Lat:", st_coordinates(YlangWorldData_sf)[,2], "<br>", "Lon:", st_coordinates(YlangWorldData_sf)[,1]))  # Show Lat and Lon
leaflet_map <- leaflet(data = YlangWorldData_sf) %>%
addProviderTiles("OpenStreetMap") %>%  # Add OpenStreetMap as the base layer
addCircleMarkers(data = YlangWorldData_sf,
~st_coordinates(YlangWorldData_sf)[,1],  # Extract Longitude
~st_coordinates(YlangWorldData_sf)[,2],  # Extract Latitude
popup = ~paste("Lat:", st_coordinates(YlangWorldData_sf)[,2], "<br>", "Lon:", st_coordinates(YlangWorldData_sf)[,1]))  # Show Lat and Lon
library(leaflet)
library(sf)
leaflet_map <- leaflet(data = YlangWorldData_sf) %>%
addProviderTiles("OpenStreetMap") %>%  # Add OpenStreetMap as the base layer
addCircleMarkers(
lng = st_coordinates(YlangWorldData_sf)[,1],  # Extract Longitude
lat = st_coordinates(YlangWorldData_sf)[,2],  # Extract Latitude
popup = ~paste("Lat:", st_coordinates(YlangWorldData_sf)[,2], "<br>", "Lon:", st_coordinates(YlangWorldData_sf)[,1])  # Show Lat and Lon
)
# Print the map
leaflet_map
getwd()
library(htmlwidgets)
# Save the map as an HTML file
saveWidget(leaflet_map, "YlangWorldMap.html", selfcontained = TRUE)
pwd
savehistory("~/R/YlangWorld/YlangWorld.Rhistory")
